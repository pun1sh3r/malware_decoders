import re
import binascii
from collections import defaultdict
import sys
global results_dict

#:: sample: dfd688b5cf25d9cbbe4fc2bd67aa8faf


def decode(cipher_text,key,line):

    cipher_text_tmp = re.sub('(0x|")','',cipher_text)
    key_tmp = re.sub('(0x|")','',key)
    if not key_tmp:
        decoded_text = bytearray.fromhex(cipher_text_tmp).decode('utf-8').strip()
        cipher_text_tmp = decoded_text.replace('0x', '')
        try:
            cipher_text_tmp = bytearray.fromhex(cipher_text_tmp).decode('ISO-8859-1').strip()
            results_dict[line].update({"({},{})".format(cipher_text, key): cipher_text_tmp})

        except:
            results_dict[line].update({"({},{})".format(cipher_text, key): cipher_text_tmp})
        return
    else:
        cipher_text_tmp = binascii.unhexlify(cipher_text_tmp)
        clear_text = ''
        try:
            key_bin = binascii.unhexlify(key_tmp)
        except:
            print('error -> {}'.format(line))
        key_length = len(key_bin)
        for i in range(len(cipher_text_tmp)):
            clear_text += chr(cipher_text_tmp[i] ^ key_length)
        if '0x' in clear_text:
            clear_text = clear_text.replace('0x', '')
            clear_text = bytearray.fromhex(clear_text).decode('ISO-8859-1').strip()
        results_dict[line].update({"({},{})".format(cipher_text, key): clear_text})
        return


src_file = sys.argv[1]
dst_file = sys.argv[2]
with open(src_file,'r') as fh:
    data = fh.readlines()
    results_dict = defaultdict(dict)
    with open(dst_file,'w') as outfile:

        for line in data:
            if line:
                line = line.rstrip()
                regex1 = re.findall(r'("0x[0-9A-F]*")',line)
                if regex1 :
                    for i in range(0,len(regex1),2):
                        try:
                            cipher_text, key = regex1[i:i+2]
                            decode(cipher_text,key,line)
                        except:
                            print('exception-> {}'.format(line))

                    for key,value in results_dict[line].items():
                        replacement_regex = re.compile(r'{}'.format(key))
                        line = line.replace('possible_decoding{}'.format(key),value)
                        line = line.replace('$BinaryToString{}'.format(key),value)
                    outfile.write(line + '\n')
                else:
                    outfile.write(line + '\n')


